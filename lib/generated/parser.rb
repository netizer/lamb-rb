#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.0
# from Racc grammar file "".
#

require 'racc/parser.rb'

  require "lexer"
  require "nodes"

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 89)
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.tokenize(code) # Tokenize the code using our lexer
    puts @tokens.inspect if show_tokens
    do_parse # Kickoff the parsing process
  end

  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    12,    14,    15,    18,    17,    12,    14,    15,    18,    17,
    34,    11,    52,    12,    13,    16,    11,    43,    49,    13,
    16,    27,    12,    14,    15,    18,    17,    13,    14,    15,
    18,    17,    41,    11,    24,    42,    13,    16,    11,    41,
    45,    22,    16,    14,    15,    18,    17,    21,    31,    14,
    15,    18,    17,    11,    19,    43,    38,    16,    44,    11,
    43,    46,    32,    16,    14,    15,    18,    17,   nil,    31,
    14,    15,    18,    17,    11,    31,    41,    48,    16,   nil,
    11,   nil,   nil,   nil,    16,    14,    15,    18,    17,   nil,
    14,    15,    18,    17,   nil,    11,   nil,   nil,   nil,    16,
    11,   nil,   nil,   nil,    16 ]

racc_action_check = [
    31,    31,    31,    31,    31,    47,    16,    16,    16,    16,
    21,    31,    47,     2,    31,    31,    16,    36,    36,    47,
    16,    16,     0,     0,     0,     0,     0,     2,    11,    11,
    11,    11,    25,     0,    15,    25,     0,     0,    11,    28,
    28,     8,    11,    18,    18,    18,    18,     6,    18,    20,
    20,    20,    20,    18,     1,    26,    23,    18,    26,    20,
    29,    29,    19,    20,    22,    22,    22,    22,   nil,    22,
    24,    24,    24,    24,    22,    24,    35,    35,    22,   nil,
    24,   nil,   nil,   nil,    24,    41,    41,    41,    41,   nil,
    43,    43,    43,    43,   nil,    41,   nil,   nil,   nil,    41,
    43,   nil,   nil,   nil,    43 ]

racc_action_pointer = [
    20,    54,    11,   nil,   nil,   nil,    37,   nil,    34,   nil,
   nil,    25,   nil,   nil,   nil,    22,     3,   nil,    40,    62,
    46,     6,    61,    42,    67,    17,    40,   nil,    24,    45,
   nil,    -2,   nil,   nil,   nil,    61,     2,   nil,   nil,   nil,
   nil,    82,   nil,    87,   nil,   nil,   nil,     3,   nil,   nil,
   nil,   nil,   nil ]

racc_action_default = [
    -1,   -34,    -2,    -3,    -6,    -7,    -8,    -9,   -10,   -11,
   -12,   -34,   -16,   -17,   -18,   -19,   -34,   -26,   -34,   -34,
    -5,   -34,   -34,   -34,   -34,   -34,   -34,   -23,   -34,   -34,
   -27,   -34,    53,    -4,   -20,   -34,   -34,   -32,   -13,   -21,
   -22,   -34,   -24,   -34,   -25,   -28,   -29,   -34,   -30,   -31,
   -14,   -15,   -33 ]

racc_goto_table = [
    20,    23,     1,     2,   nil,    26,    25,    29,    28,    30,
    33,    36,    35,    37,    39,    40,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    50,   nil,    51,    47,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    20 ]

racc_goto_check = [
     4,     3,     1,     2,   nil,    11,     3,    11,     3,    12,
     3,    11,     3,    12,     3,    12,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     3,   nil,     3,     2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     4 ]

racc_goto_pointer = [
   nil,     2,     3,   -10,    -2,   nil,   nil,   nil,   nil,   nil,
   nil,   -11,    -9 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,     9,
    10,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 20, :_reduce_1,
  1, 20, :_reduce_2,
  1, 21, :_reduce_3,
  3, 21, :_reduce_4,
  2, 21, :_reduce_5,
  1, 21, :_reduce_6,
  1, 22, :_reduce_none,
  1, 22, :_reduce_none,
  1, 22, :_reduce_none,
  1, 22, :_reduce_none,
  1, 22, :_reduce_none,
  1, 22, :_reduce_none,
  3, 22, :_reduce_13,
  3, 30, :_reduce_14,
  3, 30, :_reduce_15,
  1, 23, :_reduce_none,
  1, 23, :_reduce_none,
  1, 24, :_reduce_18,
  1, 25, :_reduce_19,
  3, 25, :_reduce_20,
  3, 26, :_reduce_21,
  3, 26, :_reduce_22,
  2, 27, :_reduce_23,
  3, 27, :_reduce_24,
  3, 27, :_reduce_25,
  1, 28, :_reduce_26,
  2, 28, :_reduce_27,
  3, 28, :_reduce_28,
  3, 28, :_reduce_29,
  4, 29, :_reduce_30,
  4, 29, :_reduce_31,
  3, 29, :_reduce_32,
  3, 31, :_reduce_33 ]

racc_reduce_n = 34

racc_shift_n = 53

racc_token_table = {
  false => 0,
  :error => 1,
  :NEWLINE => 2,
  :STRING => 3,
  :IDENTIFIER => 4,
  :FUNCTION_CALL => 5,
  :FUNCTION_CALL_NO_ARGS => 6,
  :ARROW => 7,
  :INDENT => 8,
  :DEDENT => 9,
  "." => 10,
  "=>" => 11,
  "=" => 12,
  "(" => 13,
  ")" => 14,
  "," => 15,
  ";" => 16,
  "[" => 17,
  "]" => 18 }

racc_nt_base = 19

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "NEWLINE",
  "STRING",
  "IDENTIFIER",
  "FUNCTION_CALL",
  "FUNCTION_CALL_NO_ARGS",
  "ARROW",
  "INDENT",
  "DEDENT",
  "\".\"",
  "\"=>\"",
  "\"=\"",
  "\"(\"",
  "\")\"",
  "\",\"",
  "\";\"",
  "\"[\"",
  "\"]\"",
  "$start",
  "Program",
  "Expressions",
  "Expression",
  "Terminator",
  "Literal",
  "Get",
  "Set",
  "Array",
  "Call",
  "Def",
  "CommaSeparatedItems",
  "Block" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 18)
  def _reduce_1(val, _values, result)
     result = Nodes.new([])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 19)
  def _reduce_2(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 23)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val)
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 24)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 25)
  def _reduce_5(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 26)
  def _reduce_6(val, _values, result)
     result = Nodes.new([])
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

module_eval(<<'.,.,', 'grammar.y', 36)
  def _reduce_13(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_14(val, _values, result)
     result = Nodes.new([val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 41)
  def _reduce_15(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

# reduce 16 omitted

# reduce 17 omitted

module_eval(<<'.,.,', 'grammar.y', 49)
  def _reduce_18(val, _values, result)
     result = StringNode.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_19(val, _values, result)
     result = GetNode.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_20(val, _values, result)
     result = HashGetNode.new(val[2], val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_21(val, _values, result)
     result = SetNode.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 59)
  def _reduce_22(val, _values, result)
     result = SetNode.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 63)
  def _reduce_23(val, _values, result)
     result = Nodes.new([])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_24(val, _values, result)
     result = Nodes.new([val[1]])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_25(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_26(val, _values, result)
     result = CallNode.new(val[0], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_27(val, _values, result)
     result = CallNode.new(val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 70)
  def _reduce_28(val, _values, result)
     result = CallNode.new(val[0], Nodes.new([val[1]]))
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 71)
  def _reduce_29(val, _values, result)
     result = CallNode.new(val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 74)
  def _reduce_30(val, _values, result)
     result = DefNode.new(val[0], Nodes.new([val[2]]))
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 75)
  def _reduce_31(val, _values, result)
     result = DefNode.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 76)
  def _reduce_32(val, _values, result)
     result = DefNode.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_33(val, _values, result)
     result = val[1]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
